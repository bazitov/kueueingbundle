parameters:
    kaliop_queueing.worker_manager.service.class: Kaliop\QueueingBundle\Services\WorkerManager
    kaliop_queueing.event_dispatcher.class: Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher
    kaliop_queueing.message_consumer.monitor.service.class: Kaliop\QueueingBundle\Services\MessageConsumer\EventListener\Monitor

    kaliop_queueing.message_producer.service.class: Kaliop\QueueingBundle\Services\MessageProducer
    kaliop_queueing.message_consumer.service.class: Kaliop\QueueingBundle\Services\MessageConsumer
    kaliop_queueing.message_producer.queue_control.service.class: Kaliop\QueueingBundle\Services\MessageProducer\QueueControl

    kaliop_queueing.message_producer.console_command.service.class: Kaliop\QueueingBundle\Services\MessageProducer\ConsoleCommand
    kaliop_queueing.message_consumer.console_command.service.class: Kaliop\QueueingBundle\Services\MessageConsumer\ConsoleCommand
    kaliop_queueing.message_consumer.console_command.filter.service.class: Kaliop\QueueingBundle\Services\MessageConsumer\EventListener\ConsoleCommandFilter

    kaliop_queueing.message_consumer.symfony_service.service.class: Kaliop\QueueingBundle\Services\MessageConsumer\SymfonyService

    kaliop_queueing.message_producer.xmlrpc_call.service.class: Kaliop\QueueingBundle\Services\MessageProducer\XmlrpcCall
    kaliop_queueing.message_consumer.xmlrpc_call.service.class: Kaliop\QueueingBundle\Services\MessageConsumer\XmlrpcCall

services:

    kaliop_queueing.event_dispatcher.service:
        class: %kaliop_queueing.event_dispatcher.class%
        arguments: [@service_container]

    kaliop_queueing.worker_manager.service:
         class: %kaliop_queueing.worker_manager.service.class%
         arguments: [ %kaliop_queueing.default.workers.list%, %kernel.root_dir% ]

    kaliop_queueing.message_producer.service:
         class: %kaliop_queueing.message_producer.service.class%
         calls:
             # the name of the queue is declared on the command line, no need to put it here via setQueuename
             - [ setContainer, [ @service_container ] ]

    kaliop_queueing.message_producer.queue_control.service:
        class: %kaliop_queueing.message_producer.queue_control.service.class%
        parent: kaliop_queueing.message_producer.service
        # nb: we assign by default no rabbitmqbundle producer to this service, otherwise it would look like the following:
        #calls: [ setQueueName, [ producer_name ] ]

    kaliop_queueing.message_consumer.service:
        class: %kaliop_queueing.message_consumer.service.class%
        calls:
            - [ setLogger, [ @?logger ] ]
            - [ setDispatcher, [ @kaliop_queueing.event_dispatcher.service ] ]
        tags:
            - { name: monolog.logger, channel: kaliop_queueing }

    # you can enable this service to get debug info of received messages
    kaliop_queueing.message_consumer.monitor.service:
        class: %kaliop_queueing.message_consumer.monitor.service.class%
        tags:
             - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }

    kaliop_queueing.message_producer.console_command.service:
        class: %kaliop_queueing.message_producer.console_command.service.class%
        parent: kaliop_queueing.message_producer.service
        # nb: we assign by default no rabbitmqbundle producer to this service, otherwise it would look like the following:
        #calls: [ setQueueName, [ producer_name ] ]

    kaliop_queueing.message_consumer.console_command.service:
        class: %kaliop_queueing.message_consumer.console_command.service.class%
        arguments: [ @kaliop_queueing.worker_manager.service ]
        parent: kaliop_queueing.message_consumer.service

    # a filter used to limit which console commands can be execute via queue messages
    kaliop_queueing.message_consumer.console_command.filter.service:
        class: %kaliop_queueing.message_consumer.console_command.filter.service.class%
        arguments: [ %kaliop_queueing.default.allowed_commands% ]
        tags:
             - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }

    kaliop_queueing.message_consumer.symfony_service.service:
        class: %kaliop_queueing.message_consumer.symfony_service.service.class%
        arguments: [ @kaliop_queueing.worker_manager.service ]
        parent: kaliop_queueing.message_consumer.service

    kaliop_queueing.message_producer.xmlrpc_call.service:
        class: %kaliop_queueing.message_producer.xmlrpc_call.service.class%
        arguments: [ ]
        parent: kaliop_queueing.message_producer.service

    kaliop_queueing.message_consumer.xmlrpc_call.service:
        class: %kaliop_queueing.message_consumer.xmlrpc_call.service.class%
        arguments: [ ]
        parent: kaliop_queueing.message_consumer.service
