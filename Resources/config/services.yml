parameters:
    kaliop_queueing.worker_manager.service.class: Kaliop\QueueingBundle\Service\WorkerManager
    kaliop_queueing.watchdog.service.class: Kaliop\QueueingBundle\Helper\Watchdog
    kaliop_queueing.event_dispatcher.class: Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher
    kaliop_queueing.message_consumer.monitor.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\Monitor

    kaliop_queueing.message_producer.service.class: Kaliop\QueueingBundle\Service\MessageProducer
    kaliop_queueing.message_consumer.service.class: Kaliop\QueueingBundle\Service\MessageConsumer
    kaliop_queueing.message_producer.generic_message.service.class: Kaliop\QueueingBundle\Service\MessageProducer\GenericMessage
    kaliop_queueing.message_producer.queue_control.service.class: Kaliop\QueueingBundle\Service\MessageProducer\QueueControl

    kaliop_queueing.message_producer.console_command.service.class: Kaliop\QueueingBundle\Service\MessageProducer\ConsoleCommand
    kaliop_queueing.message_consumer.console_command.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\ConsoleCommand
    kaliop_queueing.message_consumer.console_command.filter.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\ConsoleCommandFilter

    kaliop_queueing.message_producer.symfony_service.service.class: Kaliop\QueueingBundle\Service\MessageProducer\SymfonyService
    kaliop_queueing.message_consumer.symfony_service.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\SymfonyService
    kaliop_queueing.message_consumer.symfony_service.filter.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\SymfonyServiceFilter

    kaliop_queueing.message_producer.xmlrpc_call.service.class: Kaliop\QueueingBundle\Service\MessageProducer\XmlrpcCall
    kaliop_queueing.message_consumer.xmlrpc_call.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\XmlrpcCall

    kaliop_queueing.message_producer.http_request.service.class: Kaliop\QueueingBundle\Service\MessageProducer\HTTPRequest
    kaliop_queueing.message_consumer.http_request.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\HTTPRequest
    kaliop_queueing.message_consumer.http_request.filter.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\HTTPRequestFilter

    kaliop_queueing.message_consumer.noop.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\Noop
    kaliop_queueing.message_consumer.timing.filter.service.class: Kaliop\QueueingBundle\Service\MessageConsumer\EventListener\TimingFilter

services:

    kaliop_queueing.event_dispatcher.service:
        class: %kaliop_queueing.event_dispatcher.class%
        arguments: [@service_container]

    kaliop_queueing.worker_manager.service:
         class: %kaliop_queueing.worker_manager.service.class%
         arguments: [ %kaliop_queueing.default.workers.list%, %kernel.root_dir% ]

    kaliop_queueing.watchdog.service:
        class: %kaliop_queueing.watchdog.service.class%
        arguments: [ @kaliop_queueing.event_dispatcher.service ]

    kaliop_queueing.message_producer.service:
         class: %kaliop_queueing.message_producer.service.class%
         calls:
             # the name of the queue is declared on the command line, no need to put it here via setQueuename
             - [ setContainer, [ @service_container ] ]

    kaliop_queueing.message_producer.queue_control.service:
        class: %kaliop_queueing.message_producer.queue_control.service.class%
        parent: kaliop_queueing.message_producer.service
        # nb: we assign by default no rabbitmqbundle producer to this service, otherwise it would look like the following:
        #calls: [ setQueueName, [ producer_name ] ]

    kaliop_queueing.message_producer.generic_message.service:
        class: %kaliop_queueing.message_producer.generic_message.service.class%
        parent: kaliop_queueing.message_producer.service

    kaliop_queueing.message_consumer.service:
        class: %kaliop_queueing.message_consumer.service.class%
        calls:
            - [ setLogger, [ @?logger ] ]
            - [ setDispatcher, [ @kaliop_queueing.event_dispatcher.service ] ]
        tags:
            - { name: monolog.logger, channel: kaliop_queueing }

    kaliop_queueing.message_producer.console_command.service:
        class: %kaliop_queueing.message_producer.console_command.service.class%
        parent: kaliop_queueing.message_producer.service
        # nb: we assign by default no rabbitmqbundle producer to this service, otherwise it would look like the following:
        #calls: [ setQueueName, [ producer_name ] ]

    kaliop_queueing.message_consumer.console_command.service:
        class: %kaliop_queueing.message_consumer.console_command.service.class%
        arguments: [ @kaliop_queueing.worker_manager.service ]
        parent: kaliop_queueing.message_consumer.service

    # a filter used to limit which console commands can be execute via queue messages
    kaliop_queueing.message_consumer.console_command.filter.service:
        class: %kaliop_queueing.message_consumer.console_command.filter.service.class%
        arguments: [ %kaliop_queueing.default.allowed_commands% ]
        tags:
             - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }

    kaliop_queueing.message_producer.symfony_service.service:
        class: %kaliop_queueing.message_producer.symfony_service.service.class%
        parent: kaliop_queueing.message_producer.service
        # nb: we assign by default no rabbitmqbundle producer to this service, otherwise it would look like the following:
        #calls: [ setQueueName, [ producer_name ] ]

    kaliop_queueing.message_consumer.symfony_service.service:
        class: %kaliop_queueing.message_consumer.symfony_service.service.class%
        arguments: [@service_container]
        parent: kaliop_queueing.message_consumer.service

    # a filter used to limit which service methods can be execute via queue messages
    kaliop_queueing.message_consumer.symfony_service.filter.service:
        class: %kaliop_queueing.message_consumer.symfony_service.filter.service.class%
        arguments: [ %kaliop_queueing.default.allowed_services% ]
        tags:
             - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }

    kaliop_queueing.message_producer.xmlrpc_call.service:
        class: %kaliop_queueing.message_producer.xmlrpc_call.service.class%
        parent: kaliop_queueing.message_producer.service

    kaliop_queueing.message_consumer.xmlrpc_call.service:
        class: %kaliop_queueing.message_consumer.xmlrpc_call.service.class%
        parent: kaliop_queueing.message_consumer.service

    kaliop_queueing.message_producer.http_request.service:
        class: %kaliop_queueing.message_producer.http_request.service.class%
        parent: kaliop_queueing.message_producer.service
        # nb: we assign by default no rabbitmqbundle producer to this service, otherwise it would look like the following:
        #calls: [ setQueueName, [ producer_name ] ]

    kaliop_queueing.message_consumer.http_request.service:
        class: %kaliop_queueing.message_consumer.http_request.service.class%
        arguments: [@service_container]
        parent: kaliop_queueing.message_consumer.service

    # a filter used to limit which remote servers can be contacted
    kaliop_queueing.message_consumer.http_request.filter.service:
        class: %kaliop_queueing.message_consumer.http_request.filter.service.class%
        arguments: [ %kaliop_queueing.default.allowed_services% ]
        tags:
             - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }

    # A 'do nothing' message consumer. Used for testing/development
    kaliop_queueing.message_consumer.noop.service:
        class: %kaliop_queueing.message_consumer.noop.service.class%
        parent: kaliop_queueing.message_consumer.service

    # you can enable this service to get debug info of received messages
    # NB: this slows down considerably the message receiving, enable (tag it) only during development
    kaliop_queueing.message_consumer.monitor.service:
        class: %kaliop_queueing.message_consumer.monitor.service.class%
    #    tags:
    #         - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }

    # A filter used to time message consumption. Enable  (tag it) for testing/development
    kaliop_queueing.message_consumer.timing.filter.service:
        class: %kaliop_queueing.message_consumer.timing.filter.service.class%
        # the number of messages to time
        arguments: [ 10 ]
        tags:
             - { name: kaliop_queueing.event_listener, event: kaliop_queueing.message_received }